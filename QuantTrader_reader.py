import streamlit as st
import pandas as pd

# Streamlit webpage title
st.title('QuantTrader Monthly Returns Table generator')

st.header('', divider='rainbow')
st.subheader('This interactive web app generates and displays the monthly and yearly returns of a strategies generated by [Logical Invests QuantTrader](https://logical-invest.com/quanttrader-application/) software. ')

st.divider()
st.write("""Please proceed by uploading your CSV file to begin the analysis.""")
# File uploader widget
uploaded_file = st.file_uploader("Choose a CSV file from the 'data' folder in QuantTrader (ie, #Nasdaq100 Hedged.csv)", type="csv")
st.divider()


with st.expander("Instructions"):
    st.write('''
        - find and upload the strategy CSV file. The file name should be in the format of `#YourStrategyName.csv`. Typically it is found in the `data` folder inside the 'QuantTrader application folder'

        - Ensure your CSV file is in the correct format, as mentioned above.
        - Use the file uploader below to select and upload your `#YourStrategyName.csv` file.
        - The app will then display a table with the calculated monthly and yearly returns of the strategy based on the uploaded data.

        Please proceed by uploading your strategy CSV file to begin the analysis
        ''')



if uploaded_file is not None:
    nasdaq_data = pd.read_csv(uploaded_file)

    # Convert the 'Date' column to datetime format
    nasdaq_data['Date'] = pd.to_datetime(nasdaq_data['Date'])

    # Set the 'Date' column as the index of the DataFrame
    nasdaq_data.set_index('Date', inplace=True)

    # Calculate monthly and yearly returns
    nasdaq_monthly_returns = nasdaq_data['Return'].resample('M').last().pct_change()
    nasdaq_yearly_returns = nasdaq_data['Return'].resample('Y').last().pct_change()

    # Pivot tables for monthly and yearly returns
    monthly_pivot = nasdaq_monthly_returns.reset_index()
    monthly_pivot['Year'] = monthly_pivot['Date'].dt.year
    monthly_pivot['Month'] = monthly_pivot['Date'].dt.month_name().str[:3]
    monthly_pivot_table = monthly_pivot.pivot_table(index='Year', columns='Month', values='Return')

    yearly_pivot = nasdaq_yearly_returns.reset_index()
    yearly_pivot['Year'] = yearly_pivot['Date'].dt.year
    yearly_pivot_table = yearly_pivot.set_index('Year')['Return']

    # Combine both pivot tables
    combined_pivot_table = monthly_pivot_table.join(yearly_pivot_table.rename('Yearly'), on='Year')

    # Ordering columns by month order and converting to percentage
    month_order = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    combined_pivot_table = 100 * combined_pivot_table[month_order + ['Yearly']]  # Reorder columns to match month order

    #formatted_combined_pivot_table = combined_pivot_table.applymap(lambda x: f"{x:.2f}%")

# Assuming 'Year' is your first column name

    # Separate the first column and the rest
    first_column = combined_pivot_table.iloc[:, :1]
    rest_columns = combined_pivot_table.iloc[:, 1:]

    # Apply formatting to all but the first column
    formatted_rest_columns = rest_columns.applymap(lambda x: f"{x:.2f}%")

    # Concatenate the first column with the formatted rest of the DataFrame
    formatted_combined_pivot_table = pd.concat([first_column, formatted_rest_columns], axis=1)

    # Display the formatted DataFrame in Streamlit
    st.dataframe(formatted_combined_pivot_table, width=900, height=500)

    # # Display the formatted DataFrame
    # st.dataframe(formatted_combined_pivot_table, width=900, height=500)
